{
	"name": "lume",
	"version": "0.3.0-alpha.14",
	"description": "A CSS3D/WebGL UI toolkit.",
	"license": "MIT",
	"homepage": "http://lume.io",
	"main": "./dist/index.js",
	"types": "./dist/index.d.ts",
	"type": "module",
	"exports COMMENT:": "This removes 'dist' from import statements, as well as replaces the 'main' field. See https://github.com/nodejs/node/issues/14970#issuecomment-571887546",
	"exports": {
		".": "./dist/index.js",
		"./": "./dist/"
	},
	"engines": {
		"node": ">=14"
	},
	"// NOTE": "Any field starting with `//` is intended as a comment.",
	"scripts": {
		"// THIS PACKAGE XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX": "",
		"// LUME SCRIPTS ---------------------------------------": "",
		"clean": "lume clean",
		"build": "lume build",
		"dev": "lume dev",
		"typecheck": "lume typecheck",
		"typecheck:watch": "lume typecheckWatch",
		"test": "npm run docs:build && lume test",
		"test:debug": "lume testDebug",
		"prettier": "lume prettier",
		"prettier:check": "lume prettierCheck",
		"release:patch": "lume releasePatch",
		"release:minor": "lume releaseMinor",
		"release:major": "lume releaseMajor",
		"release:alpha:patch": "lume releaseAlphaPatch",
		"release:alpha:minor": "lume releaseAlphaMinor",
		"release:alpha:major": "lume releaseAlphaMajor",
		"release:beta:patch": "lume releaseBetaPatch",
		"release:beta:minor": "lume releaseBetaMinor",
		"release:beta:major": "lume releaseBetaMajor",
		"release:alpha": "lume releaseAlpha",
		"release:beta": "lume releaseBeta",
		"version": "lume versionHook",
		"postversion": "lume postVersionHook",
		"// OTHER SCRIPTS --------------------------------------": "",
		"prepare": "npm run build",
		"examples": "live-server . --watch=dist/global.js,examples --open=./examples",
		"lint-format": "npm run lint-all && npm run prettier:check && npm run build && echo 'implement tests'",
		"lint": "esw --format codeframe --config ./.eslintrc.js",
		"lint-fix": "npm run lint -- --fix",
		"lint-all": "npm run lint-js && npm run lint-ts",
		"lint-fix-all": "npm run lint-js -- --fix && npm run lint-ts -- --fix",
		"lint-watch": "npm run lint-js -- --watch & p5=$!; npm run lint-ts -- --watch & p6=$!; wait $p5 $p6",
		"lint-js": "npm run lint -- 'src/**/{.,}*.{js,json,html}'",
		"lint-ts": "npm run lint -- 'src/**/*.{ts,tsx}'",
		"// ^ TODO": "Move eslint stuff into lume cli.",
		"// OTHER PACKAGES XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX": "",
		"build:all": "npm run clean:all && lerna run build",
		"dev:all": "echo TODO run everything in dev mode with rebuild on changed files",
		"clean:all": "(lerna run clean) || true",
		"clean:packages": "(lerna run clean && npm run unbootstrap -- --ignore lume) || true",
		"test:all": "lerna run test --scope '{element,element-behaviors,lume,james-bond,lowclass,variable,glas,eventful,custom-attributes}'",
		"test:all:ci": "npm run test:all -- --concurrency 1",
		"// ^ test:all:ci": "Concurrency needs to be 1 in CI for some reason, but I forgot to comment why.",
		"submodules:sync": "git submodule update --init --recursive",
		"fresh": "npm run submodules:sync && npm install --ignore-scripts && npm run bootstrap && npm run build:all && npm run docs:build",
		"refresh": "npm run purge && npm install --ignore-scripts && npm run bootstrap && npm run build:all && npm run docs:build",
		"purge": "(npm run clean:packages && npm run unbootstrap -- --scope lume) || true",
		"bootstrap": "lerna bootstrap --ignore '{,readem,glas}' --no-ci --ignore-scripts && lerna bootstrap --scope '{,readem}' --no-ci --ignore-scripts && lerna bootstrap --scope '{,glas}' --no-ci && npm run hoist && npm rebuild electron",
		"// ^ bootstrap": "Bootstrap everything except readem, and then readem by itself, to avoid a circular link. (lume->readem->lume).",
		"// ^ bootstrap 2": "TODO bootstrap readem along with cli (somehow?), so that cli is linked into it. Maybe the scope would be {,readem,cli}?",
		"// ^ bootstrap 3": "We use --ignore-scripts so that the bootstrap doesn't run prepare scripts (except with the glas package which requires a postinstall step for webgl-raub). We want it to only put dependencies in place. A subsequent lerna build step builds everything in correct order. Otherwise some packages will try to build themselves before dependencies are in place.",
		"// ^ bootstrap 4": "Apparently --ignore-scripts isn't working, and prepare scripts still run unexpectedly. https://github.com/lerna/lerna/issues/3050",
		"// ^ bootstrap 5": "We remove electron from all packages so that build/test will use the electron at the root (i.e. a manually-hoisted electron), otherwise build/test fails.",
		"unbootstrap": "lerna clean --yes",
		"// ^ unbootstrap": "'lerna clean --yes' removes all node_modules while 'lerna run clean' runs each project's particular 'clean' script.",
		"hoist": "rimraf './{apps,packages}/*/node_modules/{electron,solid-js}/'",
		"// WEBSITE XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX": "",
		"website": "(npm run docs:serve & p1=$!; npm run website:serve & p2=$!; wait $p1 $p2)",
		"website:serve": "cd apps/website && meteor",
		"website:reinstall": "cd apps/website && rimraf node_modules && npm install",
		"website:publish": "npm run website:reinstall && cd apps/website && meteor deploy lume.meteorapp.com --free --mongo",
		"// DOCS XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX": "",
		"// docs TODO": "build docs into a separate folder instead of moving files in.",
		"docs:build": "npm run docs:clean && npm run docs:copy && npm run docs:link && node --input-type module < ./scripts/build-docs.js",
		"docs:copy": "cp packages/element-behaviors/README.md docs/guide/includes/lume-element-behaviors.md && cp packages/element/README.md docs/guide/includes/lume-element.md && cp packages/variable/README.md docs/guide/includes/lume-variable.md && cp packages/autolayout/README.md docs/guide/includes/lume-autolayout.md",
		"docs:link": "ln -sf node_modules/lume/dist/global.js docs/global.js && ln -sf node_modules/lume/dist/global.js.map docs/global.js.map",
		"docs:clean": "rm -f docs/src && rm -f docs/global.js && rm -f docs/global.js.map && rimraf docs/api/ && rimraf docs/guide/includes/lume-*",
		"docs:serve": "live-server --host=0.0.0.0 --port=54321 --watch=global.js,docs --cors ./docs",
		"docs:reinstall": "cd docs && rimraf node_modules && npm install",
		"docs:publish": "echo TODO: TEST DOCS WITHOUT LERNA BOOTSTRAPPING && npm run docs:reinstall && npm run docs:build && npx surge docs && echo && echo You should re-bootstrap the repo now.",
		"docs": "npm run build && npm run docs:build && npm run docs:serve"
	},
	"dependencies": {
		"@lume/autolayout": "^0.8.0",
		"@lume/element": "^0.6.0",
		"@lume/eventful": "^0.2.2",
		"@lume/three-projected-material": "^0.2.2",
		"@lume/variable": "^0.7.2",
		"@tweenjs/tween.js": "^18.6.4",
		"classy-solid": "^0.1.4",
		"element-behaviors": "^3.0.0",
		"james-bond": "^0.5.0",
		"lowclass": "^5.0.0",
		"regexr": "^1.5.1",
		"three": "^0.139.0"
	},
	"devDependencies": {
		"@lume/cli": "^0.9.0",
		"@types/mkdirp": "^0.5.2",
		"@types/rimraf": "^2.0.3",
		"@types/three": "^0.139.0",
		"at-at": "^1.1.0",
		"babel-eslint": "8.2.6",
		"docsify-cli": "trusktr/docsify-cli#add-cors",
		"electron": "14.0.1",
		"eslint": "5.2.0",
		"eslint-config-prettier": "^3.1.0",
		"eslint-friendly-formatter": "4.0.1",
		"eslint-plugin-html": "4.0.5",
		"eslint-plugin-json": "1.2.0",
		"eslint-plugin-promise": "4.0.1",
		"eslint-plugin-typescript": "0.12.0",
		"eslint-watch": "4.0.2",
		"jsdoctypeparser": "^5.0.1",
		"lerna": "4.0.0",
		"live-server": "^1.2.1",
		"mkdirp": "^0.5.1",
		"prettier": "^2.3.2",
		"readem": "^0.2.1",
		"rimraf": "^3.0.0",
		"solid-js": "^1.3.0",
		"surge": "^0.23.0",
		"typescript": "4.6.3",
		"typescript-eslint-parser": "20.1.1"
	},
	"repository": {
		"type": "git",
		"url": "git@github.com:lume/lume.git"
	},
	"bugs": {
		"url": "https://github.com/lume/lume/issues"
	},
	"keywords": [
		"lume",
		"gui",
		"graphical user interface",
		"graphical-user-interface",
		"interface",
		"interface library",
		"interface-library",
		"ui",
		"user interface",
		"user-interface",
		"widgets",
		"ui widgets",
		"ui-widgets",
		"components",
		"interface components",
		"interface-components",
		"ui components",
		"ui-components",
		"app components",
		"app-components",
		"layout",
		"rendertree",
		"render tree",
		"render-tree",
		"scenegraph",
		"scene graph",
		"scene-graph",
		"browser interface",
		"browser-interface",
		"interactive",
		"interaction",
		"3D",
		"3d",
		"graphics",
		"3D graphics",
		"3D-graphics",
		"3d graphics",
		"3d-graphics",
		"animation",
		"3D animation",
		"3D-animation",
		"3d animation",
		"3d-animation",
		"browser",
		"clientside",
		"client side",
		"client-side",
		"html5",
		"touch",
		"touch interface",
		"touch-interface",
		"responsive",
		"mobile",
		"web",
		"web-development",
		"webdev",
		"three.js",
		"threejs",
		"three-js",
		"custom-elements",
		"CustomElements",
		"custom-element",
		"CustomElement",
		"CSS3D",
		"css3d",
		"WebGL",
		"webgl",
		"WebVR",
		"webvr",
		"WebXR",
		"webxr",
		"WebComponents",
		"web-components",
		"webcomponents",
		"WebComponent",
		"web-component",
		"webcomponent"
	]
}
